**********************
README
**********************

基本的な使い方
===================
各フォルダごとにVagrantファイルが置かれている。
ディレクトリに移動して、::

 $ vagrant up
 
すると、そのVagrantfileに登録されたVMが全部立ち上がる。
また、::

 $ vagrant up <VM名>
 
を実行すると、指定したVMだけ立ち上がる。

補助スクリプト
===============
複数のVagrantfileに定義されたVMを立ち上げるのが億劫だったので、
一度に起動できるような補助スクリプトを作った。


以下のように引数なしで実行するとヘルプが表示される::

 $ ./vmctl.py


基本的な使い方（クラスタ操作編）
----------------------------------
設定ファイル（デフォルト: cluster.yml）に記載された定義にしたがい、
複数のVagrantfileに定義されたVM群を管理する。

使えるVM群のリストを表示する::

 $ ./vmctl.py list

使えるVM群のリストを詳しく表示する::

 $ ./vmctl.py list -v


VM群を起動する::

 $ ./vmctl.py up <VM群名>

VM群を停止する::

 $ ./vmctl.py halt <VM群名>

VM群の状態を確認する::

 $ ./vmctl.py status <VM群名>

VM群を削除する::

 $ ./vmctl.py destroy <VM群名>

基本的な使い方（VM直接操作編）
----------------------------------
ディレクトリとVM名を指定し、
設定ファイルに依らない管理を行う。

VMを起動する::

 $ ./vmctly.py up <ディレクトリ>/<VM名>

VMを停止する::

 $ ./vmctly.py halt <ディレクトリ>/<VM名>

VMの状態を確認する::

 $ ./vmctly.py status <ディレクトリ>/<VM名>

VMを削除する::

 $ ./vmctly.py destroy <ディレクトリ>/<VM名>

VM群名、VM名について
---------------------
VM群名やVM名にはスペースなしのカンマ区切りで複数個渡せる。

例（VM群）::

 $ ./vmctl.py status cdh5,spark

例（VM）::

 $ ./vmctl.py status tmp/tmp-01,tmp/tmp-02

備考
----
ひとつのVagrantfileにクラスタに関係する
すべてのVMを含めて管理することもできるが、
その場合は異なるクラスタで共通するVMを
使いまわすことができない。

.. vim: ft=rst tw=0
